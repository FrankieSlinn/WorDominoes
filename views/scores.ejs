<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="../HOFStyle.css" type="text/css">
  <title>WorDominoes - Hall Of Fame</title>
</head>
<body>

  <%
let sortArray = []
let newestScore = 0
//to populate minimum score in HoF to see if newest score eligioble for HoF
let minimum
//number of records in the HoF
let numRec = 70
//array of IDs to be deleted
let DBdel = []
//to find minimum score
let numbers =[]

 //populate array with names, scores and ids from scores array with objects
for(let i = 0; i < scores.length; i++) { 
  if(parseInt(scores[i].score)){
  sortArray.push([JSON.stringify(scores[i].lname), parseInt(scores[i].score), scores[i].id]); 
  numbers.push(parseInt(scores[i].score));
}}

console.log("test")
console.log("sortArray length", sortArray.length)
console.log("numbers length", numbers.length)

 console.log("min numbers", Math.min(...numbers))
 console.log("minimum", minimum)

   newestScore = sortArray[sortArray.length-1][1]

  //get rid of last element in sortArray for each record
  for(i=0; i< sortArray.length; i++){
    sortArray[i].pop();
  }

  //sort sortArray by score
  sortArray.sort((a, b) => b[1] - a[1]);
  //sort numbers to find minimum value
  numbers.sort((a, b) => b - a);


  //get minimum score for comparison with newest score to see if qualifies for HoF
  //define minimum value so that on the game it can be determined if the user has made it into the hall of fame
  //if the amt of records is less than length of HoF minimum can be minimum number or zero
 if(sortArray.length<numRec) {minimum = Math.min(...numbers, 0)}
 //Otherwise it's the minimum of the first 20 values
 else{
  minimum=Math.min(...numbers.slice(0, numRec));
 }
 console.log("minimum", minimum)



  // //Remove excess records(too low) form the sortArray so they can be deleted from the database
  // let DBDelArray = sortArray.splice(numRec, sortArray.length-numRec)
  // let DBDel = []
  // //populate array with data of users with scores too low for the HoF
  // for(i=0; i< DBDelArray.length; i++){
  //   DBDel.push(JSON.stringify(DBDelArray[i][DBDelArray[i].length-1]))
  // } 

  %>
      <br />
    <!-- Link to return to the game -->
    <p class="return"><a class="game" href= "/">Go Back to Game</a></p>

<div class="gridContainer">
  <h1 class="HOFTitle">Hall of Fame</h1>
  <div class="scoreContainer">
    <br>
    <br>
    <h2 class='rank-name'>Rank</h2>
    <h2 class='heading-name'>Name</h2>
    <h2 class="heading-score">Score</h2>
    <br>
    <!-- create html table with cells for rank, name, score -->
    <% for (let i = 1; i <= numRec; i++) { %>
      <div class='rank rank<%- i %>'><%- i %></div>
      <div class='name<%- i %> name'>-</div>
      <span class="score score<%- i %>">-</span>
    <% } %>
  </div>
</div>
  <script>
    //assign variables on the servrer side to the client side
    let sortArray = [<%- sortArray %>];

    let minimum= <%- minimum %>;
    
    let numRec = <%- numRec %>;

    console.log("minimum in frontend js in scores", minimum)
    updateMinimumHOFScore();
// //delete items from database if score too low to be displayed in teh hall of fame
//     for (i = 0; i < DBDel.length; i++) {
//       let id = DBDel[i]
//       fetch(`http://localhost:3000/scores/${id}`, {
//           method: "delete",
//           headers: {
//             "Content-Type": "application/json",
//           },
//         })
//         .then((data) => data.json())
//         .then((scores) => console.log(scores));
//     }
    //js classes for names and scores
    let names=[]
    let scores=[]
    for (let i = 1; i <= numRec; i++) {
  names.push(`.name${i}`);
  scores.push(`.score${i}`);
}
console.log(names, scores)
    let numTemp = [];
    let nameTemp = [];
    //separate elements in the sortArray into two separate arrays before they are updated into the HTML elements
    for (var i = 0; i < sortArray.length; i++) {

      if (typeof sortArray[i] === "number") {
        numTemp.push(sortArray[i])
      }
      else if (typeof sortArray[i] == "string") {
        nameTemp.push(sortArray[i])
      }
    }
//populate scores and names from the sortArray into the HTML elements to be displayed on the page. 
console.log("scores in HOF before populated", document.querySelector(scores))
console.log("numTemp before populated", numTemp)
    for (var i = 0; i < scores.length; i++) {
      document.querySelector(scores[i]).innerHTML = numTemp[i];
      document.querySelector(names[i]).innerHTML = nameTemp[i];
    }

       //pass minimum score in hall of fame to game page so that message appears if the user has made it into the HoF
     // fetch api and use "put" to change minimum
     console.log("minimum before api call", minimum) 
 function updateMinimumHOFScore() {
  console.log("updateMinimumHOFScore running")
  const id = "64fb5b18108785ce0cdf46dc"; 
  

            const requestOptions = {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                  minvalue: minimum
                 })
            };

            fetch(`/minimums/${id}`, requestOptions)
        .then(response => {
            if (!response.ok) {
                console.log("Response not OK for change API");
                throw new Error("Error");
            }
            console.log("Good response");
            console.log(response)
            return response.json(); // Call response.json() to parse JSON data
        })
        .then(updatedMinimum => {
            console.log("Updating minimum");
            document.getElementById("result").innerHTML = `Minimum updated: ${JSON.stringify(updatedMinimum)}`;
        })
        .catch(error => {
          if (error) {
    console.log(error); // Log the error message
    
  }

        });
        }
     

  </script>
  <br>
  <br>
 



  </div>
  <script>
 
    
    // let n = <%-JSON.stringify(minimum)%>
    // console.log("n", n)
    // localStorage.setItem("minimum", JSON.stringify(n));
    let m = <%-JSON.stringify(newestScore)%>
    localStorage.setItem("newestScore", JSON.stringify(m));

  </script>
  <script src="../public/control.js"></script>
</body>
</html>